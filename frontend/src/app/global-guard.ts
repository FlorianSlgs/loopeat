import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { Auth } from './connection/common/services/core/auth/auth.service';
import { AuthStateService } from './connection/common/services/core/auth-state/auth-state.service';
import { map, catchError, of } from 'rxjs';

export const globalGuard: CanActivateFn = (route, state) => {
  const authService = inject(Auth);
  const authStateService = inject(AuthStateService);
  const router = inject(Router);

  console.log('üõ°Ô∏è Guard activ√© pour:', state.url);

  // V√©rifier l'authentification via l'API
  return authService.getCurrentUser().pipe(
    map(response => {
      if (response.success && response.user) {
        console.log('‚úÖ Utilisateur authentifi√©:', response.user);

        // Mettre √† jour le state local avec les infos de l'utilisateur
        authStateService.setUser(response.user);

        // V√©rifier les permissions selon la route
        const isPro = response.user.isPro || false;

        // Routes prot√©g√©es par type d'utilisateur
        if (state.url.startsWith('/pro') && !isPro) {
          console.warn('‚ö†Ô∏è Acc√®s refus√©: utilisateur non-pro essaie d\'acc√©der √† /pro');
          router.navigate(['/utilisateurs']);
          return false;
        }

        if (state.url.startsWith('/utilisateurs') && isPro) {
          console.warn('‚ö†Ô∏è Acc√®s refus√©: utilisateur pro essaie d\'acc√©der √† /utilisateurs');
          router.navigate(['/pro']);
          return false;
        }

        if (state.url.startsWith('/admin') && !response.user.admin) {
          console.warn('‚ö†Ô∏è Acc√®s refus√©: utilisateur non-admin essaie d\'acc√©der √† /admin');
          router.navigate([isPro ? '/pro' : '/utilisateurs']);
          return false;
        }

        return true;
      }

      console.log('‚ùå Pas d\'utilisateur authentifi√©');
      router.navigate(['/connexion']);
      return false;
    }),
    catchError(error => {
      console.error('‚ùå Erreur lors de la v√©rification de l\'authentification:', error);
      router.navigate(['/connexion']);
      return of(false);
    })
  );
};
