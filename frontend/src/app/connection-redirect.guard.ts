import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { Auth } from './connection/common/services/core/auth/auth.service';
import { map, catchError, of } from 'rxjs';

/**
 * Guard qui redirige les utilisateurs d√©j√† connect√©s vers leur espace appropri√©
 * Utilis√© sur les pages de connexion pour √©viter qu'un utilisateur connect√© y acc√®de
 */
export const connectionRedirectGuard: CanActivateFn = (route, state) => {
  const authService = inject(Auth);
  const router = inject(Router);

  console.log('üîí Connection redirect guard activ√© pour:', state.url);

  return authService.getCurrentUser().pipe(
    map(response => {
      if (response.success && response.user) {
        console.log('‚úÖ Utilisateur d√©j√† connect√©, redirection...');

        const isPro = response.user.isPro || false;
        const isAdmin = response.user.admin || false;

        // Rediriger selon le type d'utilisateur
        if (isAdmin) {
          console.log('‚û°Ô∏è Redirection vers /admin');
          router.navigate(['/admin']);
        } else if (isPro) {
          console.log('‚û°Ô∏è Redirection vers /pro');
          router.navigate(['/pro']);
        } else {
          console.log('‚û°Ô∏è Redirection vers /utilisateurs');
          router.navigate(['/utilisateurs']);
        }

        return false; // Bloque l'acc√®s √† la page de connexion
      }

      // Utilisateur non connect√©, autorise l'acc√®s √† la page de connexion
      console.log('‚úÖ Utilisateur non connect√©, acc√®s √† la page de connexion autoris√©');
      return true;
    }),
    catchError(error => {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification de l\'authentification:', error);
      // En cas d'erreur, on autorise l'acc√®s √† la page de connexion
      return of(true);
    })
  );
};
