import { Injectable, inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Auth } from '../auth/auth.service';
import { AuthStateService } from '../auth-state/auth-state.service';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthInitService {
  private readonly authService = inject(Auth);
  private readonly authStateService = inject(AuthStateService);
  private readonly router = inject(Router);
  private readonly platformId = inject(PLATFORM_ID);

  private initialized = false;

  /**
   * Initialise l'√©tat d'authentification au d√©marrage de l'application
   * V√©rifie si l'utilisateur a un token auth_token valide
   */
  async initializeAuth(): Promise<void> {
    // Ne s'ex√©cute que c√¥t√© browser
    if (!isPlatformBrowser(this.platformId)) {
      console.log('‚ö†Ô∏è AuthInit: SSR d√©tect√©, skip de l\'initialisation');
      return;
    }

    // √âviter les initialisations multiples
    if (this.initialized) {
      console.log('‚ö†Ô∏è AuthInit: D√©j√† initialis√©');
      return;
    }

    this.initialized = true;

    console.log('üöÄ AuthInit: V√©rification de l\'authentification au d√©marrage...');

    try {
      const response = await this.authService.getCurrentUser().toPromise();

      if (response && response.success && response.user) {
        console.log('‚úÖ AuthInit: Utilisateur authentifi√© d√©tect√©:', response.user.email);

        // Restaurer l'√©tat de l'utilisateur
        this.authStateService.setUser(response.user);

        console.log('‚úÖ AuthInit: √âtat d\'authentification restaur√©');
      } else {
        console.log('‚ÑπÔ∏è AuthInit: Pas d\'utilisateur authentifi√©');
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è AuthInit: Pas d\'authentification active (normal si pas connect√©)');
      // Ne pas logger l'erreur comme critique, c'est normal si l'utilisateur n'est pas connect√©
    }
  }

  /**
   * Nettoie l'√©tat d'authentification et d√©connecte l'utilisateur
   */
  async logout(): Promise<void> {
    console.log('üîì AuthInit: D√©connexion...');

    try {
      await this.authService.logout().toPromise();
      this.authStateService.clearState();

      console.log('‚úÖ AuthInit: D√©connexion r√©ussie');

      // Rediriger vers la page de connexion
      this.router.navigate(['/connexion']);
    } catch (error) {
      console.error('‚ùå AuthInit: Erreur lors de la d√©connexion:', error);
      // Nettoyer le state m√™me en cas d'erreur
      this.authStateService.clearState();
      this.router.navigate(['/connexion']);
    }
  }

  /**
   * V√©rifie si l'utilisateur est actuellement authentifi√©
   */
  isAuthenticated(): boolean {
    const user = this.authStateService.getCurrentUser();
    return user() !== null;
  }

  /**
   * R√©cup√®re l'utilisateur actuel depuis le state
   */
  getCurrentUser() {
    return this.authStateService.getCurrentUser();
  }
}
