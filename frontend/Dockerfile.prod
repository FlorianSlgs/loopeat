# syntax=docker/dockerfile:1
ARG NODE_VERSION=22.20.0

################################################################################
# Stage 1: Base
FROM node:${NODE_VERSION}-alpine as base

WORKDIR /usr/src/app

################################################################################
# Stage 2: Dépendances de production
FROM base as deps

# Copier les fichiers de dépendances
COPY package*.json ./

# Installer uniquement les dépendances de production
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev && \
    npm cache clean --force

################################################################################
# Stage 3: Build
FROM base as build

COPY package*.json ./

# Installer toutes les dépendances pour le build
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copier le code source
COPY . .

# Builder l'application Angular SSR
RUN npm run build

################################################################################
# Stage 4: Production finale
FROM base as final

# Variables d'environnement
ENV NODE_ENV=production \
    PORT=4000

# Copier les dépendances de production
COPY --from=deps /usr/src/app/node_modules ./node_modules

# Copier package.json
COPY package.json .

# Copier les fichiers buildés depuis le stage build
# Angular SSR génère généralement un dossier dist avec browser et server
COPY --from=build /usr/src/app/dist ./dist

# Créer un utilisateur non-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /usr/src/app

# Changer d'utilisateur
USER nodejs

# Exposer le port SSR (généralement 4000)
EXPOSE 4000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD node -e "require('http').get('http://localhost:4000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Lancer le serveur SSR
CMD ["node", "dist/server/server.mjs"]