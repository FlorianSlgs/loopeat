# syntax=docker/dockerfile:1
ARG NODE_VERSION=22.20.0

################################################################################
# Stage 1: Base
FROM node:${NODE_VERSION}-alpine as base

# Installer dumb-init pour gérer correctement les signaux
RUN apk add --no-cache dumb-init

WORKDIR /usr/src/app

################################################################################
# Stage 2: Dépendances de production
FROM base as deps

# Copier les fichiers de dépendances
COPY package*.json ./

# Installer uniquement les dépendances de production
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev && \
    npm cache clean --force

################################################################################
# Stage 3: Build (si nécessaire pour TypeScript, etc.)
FROM base as build

COPY package*.json ./

# Installer toutes les dépendances pour le build
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copier le code source
COPY . .

# Si vous utilisez TypeScript, décommentez:
# RUN npm run build

################################################################################
# Stage 4: Production finale
FROM base as final

# Variables d'environnement
ENV NODE_ENV=production \
    PORT=3000

# Copier dumb-init
COPY --from=base /usr/bin/dumb-init /usr/bin/dumb-init

# Copier les dépendances de production
COPY --from=deps /usr/src/app/node_modules ./node_modules

# Copier le code source
# Si TypeScript: copier depuis build stage
# COPY --from=build /usr/src/app/dist ./dist
COPY . .

# Créer un utilisateur non-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /usr/src/app

# Changer d'utilisateur
USER nodejs

# Exposer le port
EXPOSE 3000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Utiliser dumb-init pour lancer l'application
CMD ["dumb-init", "node", "index.js"]